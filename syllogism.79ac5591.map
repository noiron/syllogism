{"version":3,"sources":["utils.js","index.js"],"names":["splitMajorPremise","sentence","terms","splits","result","i","length","term","index","indexOf","push","slice","splitMinorPremise","console","log","isABelongsToB","a","b","numbers","classifiers","number","j","sentence1","sentence2","input1","document","getElementById","input2","begin","value","result1","result2","c","innerHTML","onclick"],"mappings":";AAmEC,aA/DM,SAASA,EAAkBC,GAM3B,IALCC,IAAAA,EAAQ,CAAC,MAAO,KAChBC,EAAS,GACTC,EAAS,GAGNC,EAAI,EAAGA,EAAIH,EAAMI,OAAQD,IAAK,CAC/BE,IAAAA,EAAOL,EAAMG,GACbG,EAAQP,EAASQ,QAAQF,GAC/BJ,EAAOO,KAAKF,EAAOA,EAAQD,EAAKD,QAG7B,IAAA,IAAID,EAAI,EAAGA,EAAIF,EAAOG,OAAQD,IACjCD,EAAOM,KAAKT,EAASU,MAAMR,EAAOE,GAAIF,EAAOE,EAAE,KAE1CD,OAAAA,EAQF,SAASQ,EAAkBX,GAM3B,IALCC,IAAAA,EAAQ,CAAC,KACTC,EAAS,GACTC,EAAS,GAGNC,EAAI,EAAGA,EAAIH,EAAMI,OAAQD,IAAK,CAC/BE,IAAAA,EAAOL,EAAMG,GACbG,EAAQP,EAASQ,QAAQF,GAC/BJ,EAAOO,KAAKF,EAAOA,EAAQD,EAAKD,QAGlCF,EAAOM,KAAKT,EAASU,MAAM,EAAGR,EAAO,KAChC,IAAA,IAAIE,EAAI,EAAGA,EAAIF,EAAOG,OAAQD,IACjCD,EAAOM,KAAKT,EAASU,MAAMR,EAAOE,GAAIF,EAAOE,EAAE,KAG1CD,OADPS,QAAQC,IAAIV,GACLA,EAIF,SAASW,EAAcC,EAAGC,GAC3BD,GAAAA,IAAMC,EACD,OAAA,EAMJ,IAHCC,IAAAA,EAAU,CAAC,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC5DC,EAAc,CAAC,IAAK,IAAK,IAAK,KAE3Bd,EAAI,EAAGA,EAAIa,EAAQZ,OAAQD,IAE7B,IADCe,IAAAA,EAASF,EAAQb,GACdgB,EAAI,EAAGA,EAAIF,EAAYb,OAAQe,IAAK,CAEvCL,GAAAA,IAAMI,EADSD,EAAYE,GACCJ,EACvB,OAAA,EAKN,OAAA,EACR,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,kBAAA,EAAA,QAAA,kBAAA,EAAA,QAAA,cAAA;;AC/BA,aApCD,IAAA,EAAA,QAAA,WAEMK,EAAY,WACZC,EAAY,SAEZC,EAASC,SAASC,eAAe,UACjCC,EAASF,SAASC,eAAe,UAOvC,SAASE,IAEDN,IAAAA,EAAYE,EAAOK,MACnBN,EAAYI,EAAOE,MAGnBC,GAAU,EAAkBR,EAAAA,mBAAAA,GAE5BS,GAAU,EAAkBR,EAAAA,mBAAAA,GAG5BP,EAAIe,EAAQ,GAEZd,EAAIa,EAAQ,GAEZE,EAAID,EAAQ,GAElBlB,QAAQC,IAAIE,EAAGC,IAEX,EAAce,EAAAA,eAAAA,EAAGf,KACnBJ,QAAQC,IAAIE,EAAGc,EAAQ,IACvBL,SAASC,eAAe,UAAUO,UAAYjB,EAAIc,EAAQ,IA1B9DN,EAAOK,MAAQP,EACfK,EAAOE,MAAQN,EAEfE,SAASC,eAAe,SAASQ,QAAUN","file":"syllogism.79ac5591.map","sourceRoot":"..","sourcesContent":["/**\n * 分解大前提的句子结构\n * 比如将 “所有的猫都有尾巴”，分解成 [所有的, 猫, 都, 有尾巴]\n */\nexport function splitMajorPremise(sentence) {\n  const terms = ['所有的', '都'];\n  const splits = [];\n  const result = [];\n\n  // 找出分割点\n  for (let i = 0; i < terms.length; i++) {\n    const term = terms[i];\n    const index = sentence.indexOf(term);\n    splits.push(index, index + term.length);\n  }\n\n  for (let i = 0; i < splits.length; i++) {\n    result.push(sentence.slice(splits[i], splits[i+1]));\n  }\n  return result;\n}\n\n\n/**\n * 分解小前提的句子结构\n * 比如将 '橘猫是一只猫'，分解成 [橘猫, 是, 一只猫]\n */\nexport function splitMinorPremise(sentence) {\n  const terms = ['是'];\n  const splits = [];\n  const result = [];\n\n  // 找出分割点\n  for (let i = 0; i < terms.length; i++) {\n    const term = terms[i];\n    const index = sentence.indexOf(term);\n    splits.push(index, index + term.length);\n  }\n\n  result.push(sentence.slice(0, splits[0]));\n  for (let i = 0; i < splits.length; i++) {\n    result.push(sentence.slice(splits[i], splits[i+1]));\n  }\n  console.log(result);\n  return result;\n}\n\n\nexport function isABelongsToB(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  const numbers = ['', '一', '二', '三', '四', '五', '六', '七', '八', '九', '十'];\n  const classifiers = ['只', '个', '条', '群'];\n\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    for (let j = 0; j < classifiers.length; j++) {\n      const classifier = classifiers[j];\n      if (a === number + classifier + b) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\n\n","import { splitMajorPremise, splitMinorPremise, isABelongsToB } from \"./utils\";\n\nconst sentence1 = '所有的猫都有尾巴';\nconst sentence2 = '橘猫是一只猫';\n\nconst input1 = document.getElementById('input1');\nconst input2 = document.getElementById('input2');\n\ninput1.value = sentence1;\ninput2.value = sentence2;\n\ndocument.getElementById('begin').onclick = begin;\n\nfunction begin() {\n\n  const sentence1 = input1.value;\n  const sentence2 = input2.value;\n\n  // [\"所有的\", \"猫\", \"都\", \"有尾巴\"]\n  const result1 = splitMajorPremise(sentence1);\n  // [\"橘猫\", \"是\", \"一只猫\"]\n  const result2 = splitMinorPremise(sentence2);\n\n  // 橘猫\n  const a = result2[0];\n  // 猫\n  const b = result1[1];\n  // 一只猫\n  const c = result2[2];\n\n  console.log(a, b);\n\n  if (isABelongsToB(c, b)) {\n    console.log(a, result1[3]);\n    document.getElementById('result').innerHTML = a + result1[3];\n  }\n}"]}